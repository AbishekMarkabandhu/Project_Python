import hashlib
import time
import serial  # To communicate with Arduino

# Initialize Serial Communication with Arduino
arduino = serial.Serial(port='COM3', baudrate=9600, timeout=.1)  # Adjust 'COM3' to your port

class SimpleBlockchain:
    def __init__(self):
        self.chain = []
        self.pending_transactions = []
        self.create_block(previous_hash='0', proof=100)  # Genesis Block
    
    def create_block(self, proof, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time.time(),
            'transactions': self.pending_transactions,
            'proof': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        }
        self.pending_transactions = []
        self.chain.append(block)
        return block
    
    def add_transaction(self, device_id, data):
        self.pending_transactions.append({
            'device_id': device_id,
            'data': data,
            'timestamp': time.time()
        })
        return self.last_block['index'] + 1
    
    @staticmethod
    def hash(block):
        block_string = str(block).encode()
        return hashlib.sha256(block_string).hexdigest()
    
    @property
    def last_block(self):
        return self.chain[-1]
    
    def proof_of_work(self, last_proof):
        proof = 0
        while not self.is_valid_proof(last_proof, proof):
            proof += 1
        return proof
    
    @staticmethod
    def is_valid_proof(last_proof, proof):
        guess = f'{last_proof}{proof}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"

# Function to send commands to Arduino to control LED
def control_led(state):
    arduino.write(bytes(state, 'utf-8'))
    time.sleep(1)
    return arduino.readline()

# Blockchain to log the LED control transactions
blockchain = SimpleBlockchain()

# Example of controlling the LED and logging in the blockchain
device_id = "Arduino_LED"
led_state = "ON"  # or "OFF"

# Send command to Arduino to control the LED
response = control_led(led_state)

# Log the transaction in the blockchain
blockchain.add_transaction(device_id=device_id, data=f"LED turned {led_state}")
last_proof = blockchain.last_block['proof']
proof = blockchain.proof_of_work(last_proof)
blockchain.create_block(proof, blockchain.hash(blockchain.last_block))

# Output the blockchain
for block in blockchain.chain:
    print(f"Block {block['index']}: {block}")
